import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from matplotlib.ticker import ScalarFormatter

nSetSize = 8
dSetSize = 8
fSetSize = 8

nX= np.arange(nSetSize)
dX= np.arange(dSetSize)
fX= np.arange(fSetSize)

fig = plt.figure(figsize=(10, 8), dpi=72, facecolor="white")
ax = plt.subplot(111)

nGroup_labels = ['50', '100', '150', '200', '250','300', '350', '400']
dGroup_labels = ['16', '32', '64', '128', '256','512','1024','2048']
fGroup_labels = ['10','20', '30', '40', '50', '60','70','80']

markers = ['^', 'X', 'o', 'p', 's', '\']


params = {'legend.fontsize': 25,
          'legend.handlelength': 1.1}
plt.rcParams.update(params)

total_width, n = 1.5, 11
width = total_width / n
x = np.arange(nSetSize)

FEUAGame = (73,	641,	1821,	2433,	2652,	2712,	2687,	2772)
MEDAGame = (74,	618,	1795,	2389,	2596,	2690,	2715,	2764)

TPDSGame = (71,	633,	1675,	2194,	2357,	2435,	2457,	2500)
Greedy = (2,	7,	13,	17,	25,	26,	22,	28)
Random = (1,	1,	2,	3,	4,	5,	6,	9)


#plt.plot(fGroup_labels, Opt,  label = 'FEDR-OPT', marker = 'o',  markersize = '35', color = '#FFC0CB', markerfacecolor='none',   linestyle='--', linewidth='5')
plt.plot(fGroup_labels, FEUAGame,  label = 'FairEDR', marker = 'h',  markersize = '35', color = '#F33D3C', markerfacecolor='none',   linestyle='--', linewidth='5')
plt.plot(fGroup_labels, MEDAGame, label = 'TMC2022', marker = 'v',  markersize = '35', color = '#F37A5E', markerfacecolor='none',linestyle='-.', linewidth='5')
plt.plot(fGroup_labels, TPDSGame, label = 'TPDS2022', marker = '+',  markersize = '35',  color = '#ABBF63', markerfacecolor='none',linestyle='-.', linewidth='5')
plt.plot(fGroup_labels, Greedy, label = 'Greedy', marker = 'p',  markersize = '35', color = '#82C9D9',markerfacecolor='none', linestyle='-.', linewidth='5')
plt.plot(fGroup_labels, Random , label = 'Random ', marker = 'x',  markersize = '35',  color = '#401219', markerfacecolor='none', linestyle='-.', linewidth='5')

# 启用纵坐标的科学计数法
ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))

# 设置科学计数法样式
ax.yaxis.get_major_formatter().set_powerlimits((0, 0))

plt.xticks(x, fGroup_labels, rotation=0)

# cost: 1 - 17 (n), 1 - 7 (d)
# benefit per replica: 10 - 40, 30 - 150, 20 - 80(d)  10 - 25, 20 - 120, 20 - 45 (n)
# execution time: 0 - 5(n)   0 - 0.05(d)

# x lables: The number of edge servers           Edge density
# y labels: Execution Time (s)      Benefits per replica     The cost of caching data

#plt.ylim(0.05, 0.275)

# 启用纵坐标的科学计数法
ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))

# 设置科学计数法样式
ax.yaxis.get_major_formatter().set_powerlimits((0, 0))
#plt.ylim(0.05, 0.275)

plt.xlabel(u"Resource Capacity (r)", fontsize=25)
plt.ylabel(u"Computation Overhead (ms)", fontsize=30)

plt.tick_params(labelsize=40)

plt.legend(loc = 'center right')

plt.tight_layout()
plt.grid(True)
plt.tight_layout()

foo_fig = plt.gcf()
foo_fig.savefig('C:\\figures\\2-3time.eps',
                format='eps', dpi=1000)


plt.show()





