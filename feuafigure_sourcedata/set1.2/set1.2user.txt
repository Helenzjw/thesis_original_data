import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

nSetSize = 8
dSetSize = 8
fSetSize = 8

nX= np.arange(nSetSize)
dX= np.arange(dSetSize)
fX= np.arange(fSetSize)

fig = plt.figure(figsize=(15, 8), dpi=72, facecolor="white")
ax = plt.subplot(111)

nGroup_labels = ['2', '4', '6', '8', '10','12', '14', '16']
dGroup_labels = ['5', '10', '15', '20', '25','30','35','40']
fGroup_labels = ['1','2', '3', '4', '5', '6','7','8']

markers = ['^', 'X', 'o', 'p', 's','\']

#plt.plot(nGroup_labels , label = 'FEUA-OPT', marker = '^', color = '#FFCD00FF', linestyle='--')
#plt.plot(nGroup_labels , label = 'FEUAGame', marker = 'X', color = '#CC0C00FF', linestyle='-')
#plt.plot(nGroup_labels, label = 'MEDAGame', marker = 'o', color = '#84BD00FF', linestyle='-.')
#plt.plot(nGroup_labels, label = 'TPDSGame', marker = 'p', color = '#5C88DAFF', linestyle=';')
#plt.plot(nGroup_labels, label = 'Greedy', marker = 's', color = '#00B5E2FF', linestyle=',,')
#plt.plot(nGroup_labels, label = 'Random', marker = '\', color = '#7C878EFF', linestyle='+')

params = {'legend.fontsize': 25,
          'legend.handlelength': 1.1}
plt.rcParams.update(params)

total_width, n = 1.2, 11
width = total_width / n
x = np.arange(nSetSize)

FEUAOPT = (1,	1,	1,	1,	1,	0.967,	0.934,	0.89)
FEUAGame = (1,	1,	1,	1,	0.952857143,	0.914285714	,0.88,	0.833333333)
MEDAGame = (1,	0.99,	0.98,	0.98,	0.914285714,	0.866666667,	0.84,	0.8
)
TPDSGame = (1,	0.99,	0.98	,0.975,	0.933333333,	0.866666667,	0.835,	0.8)
IoTJ2022 = (1,	0.99,	0.98,	0.98,	0.95	,0.87,	0.85	,0.8)
TGCN2021 = (1,	0.9,	0.87	,0.86,	0.80,	0.78,	0.763333333,	0.73)
Greedy = (1,	0.99,	0.98,	0.975,	0.933333	,0.866666667,	0.84	,0.8)
Random = (1,	0.9,	0.85	,0.8,	0.76,	0.742857143,	0.733333333,	0.68)

plt.bar(x - 3.5 * width, FEUAOPT,   width=width, label='FEUA-OPT', color='#FFCD00FF', edgecolor=['k']*len(x), hatch='')
plt.bar(x - 2.5 * width, FEUAGame, width=width, color='#CC0C00FF', label = 'FEUAGame', edgecolor=['k']*len(x), hatch='')
plt.bar(x - 1.5 * width, MEDAGame, width=width, color='#84BD00FF', label = 'TMC2022', edgecolor=['k']*len(x), hatch='')
plt.bar(x - 0.5* width,TPDSGame, width=width, label='TPDS2020', color='#5C88DAFF', edgecolor=['k']*len(x), hatch='')
plt.bar(x + 0.5* width, IoTJ2022,  width=width, label = 'IoTJ2022', color = '#F18A85', edgecolor=['k']*len(x), hatch='')
plt.bar(x + 1.5* width, TGCN2021,  width=width, label = 'TGCN2021', color = '#634490', edgecolor=['k']*len(x), hatch='')
plt.bar(x + 2.5 * width , Greedy, width=width, color='#00B5E2FF', label =  'Greedy', edgecolor=['k']*len(x), hatch='')
plt.bar(x + 3.5* width, Random,  width=width, label= 'Random', color='#7C878EFF', edgecolor=['k']*len(x), hatch='')

plt.xticks(x, dGroup_labels, rotation=0)

# cost: 1 - 17 (n), 1 - 7 (d)
# benefit per replica: 10 - 40, 30 - 150, 20 - 80(d)  10 - 25, 20 - 120, 20 - 45 (n)
# execution time: 0 - 5(n)   0 - 0.05(d)

# x lables: The number of edge servers           Edge density
# y labels: Execution Time (s)      Benefits per replica     The cost of caching data

#plt.ylim(0.05, 0.275)

plt.xlabel(u"Number of mobile users", fontsize=35)
plt.ylabel(u"Allocation Ratio of Mobile Users", fontsize=30)

plt.tick_params(labelsize=40)

plt.legend(loc = 'lower left')

plt.tight_layout()
plt.grid(True)
plt.tight_layout()

foo_fig = plt.gcf()
foo_fig.savefig('C:\\figures\\1-2user.eps',
                format='eps', dpi=1000)
foo_fig.savefig('C:\\figures\\1-2user.png',
                format='eps', dpi=200)


plt.show()





